<?php

/**
 * Database connection. It contains various
 * methods to handle DB operations.
 * 
 * @param: $host      -> Host name for connection.
 * @param: $user      -> Username for connection.
 * @param: $pass      -> Password for connection.
 * @param: $datb      -> Database name.
 * @param: $conn      -> Stored connection.
 * @param: $statement -> Stores SQL statements to 
 *         the run some methods of this class.
 * @param: $conn_error  -> Stores connection errors 
 *         generated by methods of this class.
 * @param: $query_error -> Stores query errors 
 *         generated by methods of this class.
 * 
 * @method: __construct()                        -> Line 45
 * @method: query( $query )                      -> Line 73
 * @method: bind( $param, $value, $type = NULL ) -> Line 81 
 * @method: exectute()                           -> Line 112
 * @method: fetch_all()                          -> Line 127
 * @method: fetch_one()                          -> Line 134
 * @method: row_count()                          -> Line 140
 * @method: last_insert_id()                     -> Line 146
 * @method: begin_transaction()                  -> Line 151
 * @method: cancel_transaction()                 -> Line 169
 * @method: end_transaction()                    -> Line 182
 * 
 */
class database
{
    private $host;
    private $user;
    private $pass;
    private $datb;   
    private $conn;
    private $statement;
    private $conn_error;
    private $query_error;

    /** __construct sets a PDO connection and saves it as an attribute. */
    public function __construct()
    {
        $this->host = DBHOST;
        $this->user = DBUSER;
        $this->pass = DBPASS;
        $this->datb = DBNAME;
        $dsn = 'mysql:host=' . $this->host . ';dbname=' . $this->datb;

        /** Connection options. */
        $options = array(
            PDO::ATTR_PERSISTENT => true,
            PDO::ATTR_ERRMODE    => PDO::ERRMODE_EXCEPTION
            );
        try{

            /** Creating the PDO connection. */
            $this->conn = new PDO($dsn, $this->user, $this->pass, $options);

        }
        catch( PDOException $e ){

            /** Message, in case of error. */
            $this->conn_error = $e->getMessage();
            trigger_error( $this->conn_error );

        }
    }

    public function query( $query )
    {

        /** Preparing query and saving it as an attribute. */
        $this->statement = $this->conn->prepare($query);

    }

    public function bind( $param, $value, $type = NULL )
    {
        /**
         * Adding parameters to the query. It sets the 
         * type of parameter that will be placed 
         * inside the query.
         * 
         * Text query: $sql = "SELECT ... WHERE name = :name ";
         * Binding replacement: ...bindValue(':name', $var, PDO::PARAM_-tipo_de_var-)
         * In this method ...bind(':name', $value )
         * 
         */
        if( is_null($type) ){
            switch( TRUE ){
                case is_int($value):
                    $type = PDO::PARAM_INT;
                    break;
                case is_bool($value):
                    $type = PDO::PARAM_BOOL;
                    break;
                case is_null($value):
                    $type = PDO::PARAM_NULL;
                    break;
                default:
                    $type = PDO::PARAM_STR;
            }
        }

        $this->statement->bindValue( $param, $value, $type );
    }

    public function execute()
    {

        /** Executing the query. */
        try{
            return $this->statement->execute();
        }
        catch( PDOException $e ){
            $this->query_error = $e->getMessage();
            trigger_error( $this->query_error );
        }

    }

    /** It prepares the DB data to be extracted as an associative array. */
    public function fetch_all()
    {
        $this->execute();
        return $this->statement->fetchAll(PDO::FETCH_ASSOC);
    }

    /** It extracts one row of the DB (associative array). */
    public function fetch_one()
    {
        $this->execute();
        return $this->statement->fetch(PDO::FETCH_ASSOC);
    }

    public function row_count()
    {
        return $this->statement->rowCount();
    }

    /** It shows the last ID inserted. In case of error, It retrurns FALSE */
    public function last_insert_id()
    {
        return $this->conn->lastInsertId();
    }

    public function begin_transaction()
    {
        /**
         * It deactivates 'AUTOCOMMIT'. It allows multiple
         * queries, until they are commited.
         * 
         * -> 1. Connection.
         * -> 2. Declare begin_transaction.
         * -> 3. Query 1 (prepare).
         * -> 4. Execute.
         * -> 5. Query 2 (prepare).
         * -> 6. Execute.
         * -> 7. Commit.
         * 
         */
        return $this->conn->beginTransaction();
    }

    public function cancel_transaction()
    {
        /**
         * Reverts changes made in transactions. 
         * Some actions with Mysqli cannot be undone.
         * 
         * 'AUTOCOMMIT'. It allows multiple
         * queries, until they are commited.
         * 
         */
        return $this->conn->rollBack();
    }

    public function end_transaction()
    {
        /** It commits the started transaction. */
        return $this->conn->commit();
    }
}

?>